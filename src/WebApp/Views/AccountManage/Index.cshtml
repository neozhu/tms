@using WebApp.Models
@model IEnumerable<ApplicationUser>
@{
  /**/

  ViewBag.Title = "登录用户管理";
}

<!-- MAIN CONTENT -->
<div id="content">
  <!-- quick navigation bar -->
  <div class="row">
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
      <h1 class="page-title txt-color-blueDark">
        <i class="fa fa-table fa-fw "></i>
        系统管理
        <span>
          >
          系统登录账号
        </span>
      </h1>
    </div>
    <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

    </div>
  </div>
  <!-- end quick navigation bar -->
  <!-- widget grid -->
  <section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
      <!-- NEW WIDGET START -->
      <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <!-- Widget ID (each widget will need unique ID)-->
        <div class="jarviswidget" id="wid-id-4" data-widget-editbutton="false">
          <!-- widget options:
          usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
          data-widget-colorbutton="false"
          data-widget-editbutton="false"
          data-widget-togglebutton="false"
          data-widget-deletebutton="false"
          data-widget-fullscreenbutton="false"
          data-widget-custombutton="false"
          data-widget-collapsed="true"
          data-widget-sortable="false"
          -->
          <header>
            <span class="widget-icon"> <i class="fa fa-table"></i> </span>
            <h2>系统登录账号</h2>
          </header>

          <!-- widget div-->
          <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
              <!-- This area used as dropdown edit box -->
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body no-padding">

              <div class="widget-body-toolbar">
                <div class="row">
                  <div class="col-sm-8  ">
                    <div class="btn-group">
                      <a href="javascript:setlockout()" class="btn btn-sm btn-danger"> <i class="fa fa-lock"></i> 禁用账号 </a>
                    </div>
                    <div class="btn-group">
                      <a href="javascript:setunlockout()" class="btn btn-sm btn-success"> <i class="fa fa-unlock-alt"></i> 恢复账号 </a>
                    </div>
                    <div class="btn-group">
                      <a href="javascript:resetpassword()" class="btn btn-sm btn-primary"> <i class="fa fa-key"></i> 重置密码 </a>
                    </div>
                    <div class="btn-group">
                      <a href="javascript:append()" class="btn btn-sm btn-default"> <i class="fa fa-plus"></i> 注册新用户 </a>
                    </div>


                    <div class="btn-group">
                      <a href="javascript:removeit()" class="btn btn-sm btn-default"> <i class="fa fa-trash-o"></i> 删除 </a>
                    </div>
                    <div class="btn-group">
                      <a href="javascript:accept()" class="btn btn-sm btn-default"> <i class="fa fa-floppy-o"></i> 保存 </a>
                    </div>
                    <div class="btn-group">
                      <a href="javascript:reject()" class="btn btn-sm btn-default"> <i class="fa fa-window-close-o"></i> 取消 </a>
                    </div>
                    <div class="btn-group">
                      <a href="javascript:reload()" class="btn btn-sm btn-default"> <i class="fa fa-refresh"></i> 刷新 </a>
                    </div>
                    <div class="btn-group btn-group-sm hidden-xs">
                      <button type="button" onclick="importexcel('ApplicationUser')" class="btn btn-default"><i class="fa fa-cloud-upload"></i> @Html.L("Import") </button>
                      <button type="button" class="btn btn-default dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span class="caret"></span>
                        <span class="sr-only">Toggle Dropdown</span>
                      </button>
                      <ul class="dropdown-menu">
                        <li><a href="javascript:downloadtemplate()"><i class="fa fa-download"></i> @Html.L("Download") </a></li>
                      </ul>
                    </div>
                  </div>
                  <div class="col-sm-4 text-align-right">
                    <div class="btn-group">
                      <a href="javascript:window.history.back()" class="btn btn-sm btn-success"> <i class="fa fa-chevron-left"></i> 返回 </a>
                    </div>
                  </div>
                </div>

              </div>
              <div class="alert alert-warning no-margin fade in">
                <button class="close" data-dismiss="alert">
                  ×
                </button>
                <i class="fa-fw fa fa-info"></i>
                注意事项：[新增]账号得初始密码为 123456
              </div>


              <!--begin datagrid-content -->
              <div class="table-responsive">


                <table id="users_datagrid"></table>


              </div>
              <!--end datagrid-content -->

            </div>
            <!-- end widget content -->
          </div>
          <!-- end widget div -->

        </div>
        <!-- end widget -->

      </article>
      <!-- WIDGET END -->

    </div>

    <!-- end row -->
  </section>
  <!-- end widget grid -->

  @Html.Partial("_ResetPasswordPartial")
</div>
<!-- END MAIN CONTENT -->
@{ Html.RenderPartial("_ImportWindow", new ViewDataDictionary { { "EntityName", "ApplicationUser" } }); }
@section Scripts {

  <script src="@Fingerprint.Tag("/Scripts/smartadmin.easyui.min.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.easyui.component.js")"></script>
  <script src="@Fingerprint.Tag("/Scripts/jquery.extend.formatter.js")"></script>
  @Html.LangScriptTag("/Scripts/easyui/locale/easyui-lang-zh_CN.js")
  <script type="text/javascript">

 //禁用账号
    function setlockout() {
      const userid = $dg.datagrid('getChecked').map(x => x.Id);
      if (userid.length > 0) {
        $.post('/AccountManage/SetLockout', { userid: userid }).done(res => {
          reload();

        });
      }
    }
    function setunlockout() {
      const userid = $dg.datagrid('getChecked').map(x => x.Id);
      if (userid.length > 0) {
        $.post('/AccountManage/SetUnLockout', { userid: userid }).done(res => {
          reload();

        });
      }
    }
    //执行Excel到处下载
    function exportexcel() {

    }
    function downloadtemplate() {
      //默认模板路径存放位置
      const url = '/FileUpload/Download?file=/ExcelTemplate/Accounts.xlsx';
      $.fileDownload(url)
        .done(() => {
          //console.log('file download a success!');
          toastr.success('模板下载完成!');
        })
        .fail(() => {
          $.messager.alert('下载模板失败', '没有下载到导入模板[Accounts.xlsx]文件!', 'error');
        });
    }
   //显示帮助信息
    function resetpassword() {
        var row = $dg.datagrid('getChecked');
        if (row.length === 0) {
            $.messager.alert("提示", "请选中需要重置密码的记录!");
        } else {
            //console.log(row);
            showresetform(row[0].Id, row[0].UserName);
        }
    }
    function reload() {
      $dg.datagrid('uncheckAll');
      $dg.datagrid('unselectAll');
        $dg.datagrid('reload');
    }

    var $dg = $('#users_datagrid');
    var editIndex = undefined;
    function endEditing() {
      if (editIndex == undefined) { return true }
      if ($dg.datagrid('validateRow', editIndex)) {
        $dg.datagrid('endEdit', editIndex);
        editIndex = undefined;
        return true;
      } else {
        return false;
      }
    }
    function onClickCell(index, field) {
      if (editIndex != index) {
        if (endEditing()) {
          editIndex = index;
          $dg.datagrid('selectRow', index)
            .datagrid('beginEdit', index);
          var ed = $dg.datagrid('getEditor', { index: index, field: field });
          if (ed) {
            ($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
          }
        } else {
          $dg.datagrid('selectRow', editIndex);
        }
      }
    }
    function append() {
      if (endEditing()) {
        $dg.datagrid("insertRow",
          {
            index: 0,
            row: {
              CompanyCode: null,
              AccountType: 1,
              AvatarsX50: 'male1'
            }
          });
        editIndex = 0;
        $dg.datagrid('selectRow', editIndex)
          .datagrid('beginEdit', editIndex);
      }
    }
    function removeit() {
      const rows = $dg.datagrid('getChecked');
      if (rows.length > 0) {
        var id = rows.filter(item => item.Id != null).map(item => {
          return item.Id;
        });
        $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length}</span> 行记录?`, result => {
          if (result) {
            $.post('/AccountManage/DeleteCheckedAsync', { id: id })
              .done(response => {
                if (response.success) {
                  toastr.success('删除成功', '确认', { timeOut: 2000 });
                  $dg.datagrid('uncheckAll');
                  $dg.datagrid('reload');
                } else {
                  $.messager.alert('错误', response.err, 'error');
                }
              })
              .fail((jqXHR, textStatus, errorThrown) => {
                //console.log(errorThrown);
                $.messager.alert('失败', errorThrown, 'error');
              });
          }
        });
      } else {
        if (editIndex == undefined) { return }
        $dg.datagrid('cancelEdit', editIndex)
          .datagrid('deleteRow', editIndex);
        editIndex = undefined;
      }
    }
    function accept() {
      if (endEditing()) {
        if ($dg.datagrid('getChanges').length) {
          var inserted = $dg.datagrid('getChanges', "inserted");
          var deleted = $dg.datagrid('getChanges', "deleted");
          var updated = $dg.datagrid('getChanges', "updated");
          var effectRow = new Object();
          if (inserted.length) {
            effectRow.inserted = inserted;
          }
          if (deleted.length) {
            effectRow.deleted = deleted;
          }
          if (updated.length) {
            effectRow.updated = updated;
          }
          //console.log(JSON.stringify(effectRow));
          $.post("/AccountManage/SaveData", effectRow, function (response) {
            if (response.success) {
              $dg.datagrid('acceptChanges');
              $dg.datagrid('reload');
              $dg.datagrid('uncheckAll');
              $.messager.alert("提示", "保存成功！");


            }
          }, "json").fail(function () {
            $.messager.alert("错误", "提交错误了！", 'error');

          });
        }
      }
    }
    function reject() {
        $dg.datagrid('rejectChanges');
        editIndex = undefined;
    }
    function getChanges() {
        var rows = $dg.datagrid('getChanges');
        alert(rows.length + ' rows are changed!');
    }


    $(function () {
      $dg.datagrid({
        rownumbers: true,
        checkOnSelect: true,
        selectOnCheck: true,
        idField: 'Id',
        sortName: 'Id',
        sortOrder: 'desc',
        remoteFilter: true,
        singleSelect: false,
        url: '/AccountManage/GetData',
        method: 'get',
        onClickCell: onClickCell,
        pagination: true,
        clientPaging: false,
        pageList: [10, 20, 50, 100, 500],
        striped: true,
        onLoadSuccess: function (data) {
          editIndex = undefined;
        },
        columns: [[
          { field: 'ck', checkbox: true },
          {
            field: 'status',
            title: '状态',
            formatter: function (v, r, i) {
              if (r.LockoutEndDateUtc == '') {
                return '正常'
              } else {
                if (moment(r.LockoutEndDateUtc) > moment()) {
                  return '禁用'
                } else {
                  return '正常'
                }
              }
            }
          },
          {
            field: 'UserName',
            title: '<span class="required">账号名称</span>',
            width: 140,
            editor: {
              type: 'textbox',
              options: { prompt: '@Html.DisplayNameFor(model => model.UserName)', required: true, validType: 'length[0,30]' }
            },
            sortable: true,
            resizable: true
          },
          {
            field: 'FullName',
            title: '<span class="required">@Html.DisplayNameFor(model => model.FullName)</span>',
            width: 140,
            editor: {
              type: 'textbox',
              options: {
                prompt: '@Html.DisplayNameFor(model => model.FullName)',
                required: true,
                validType: 'length[0,30]'
              }
            },
            sortable: true,
            resizable: true
          },
          {
            field: 'Email',
            title: '<span class="required">电子邮件</span>',
            width: 240,
            editor: {
              type: 'textbox',
              options: { prompt: '@Html.DisplayNameFor(model => model.Email)', required: true, validType: ['email', 'length[0,50]'] }
            },
            sortable: true,
            resizable: true
          },
          {
            field: 'TenantId',
            title: '@Html.DisplayNameFor(model => model.TenantId)',
            width: 180,
            editor: {
              type: 'combogrid', options: {
                prompt: '公司', required: false, validType: 'length[0,50]',
                idField: 'Id',
                panelWidth: 440,
                textField: 'Name',
                method: 'get',
                url: '/Companies/GetComboData',
                icons: [{
                  iconCls: 'icon-clear',
                  handler: function (e) {
                    $(e.data.target).combogrid('clear');
                    var row = $dg.datagrid('getRows')[editIndex];
                    //console.log(row);
                    row.CompanyName = '';
                    row.CompanyCode = '';
                    row.TenantId = 0;
                  }
                }],
                columns: [[
                  { field: 'Name', title: '公司名称', width: 230 },
                  { field: 'Type', title: '类型', width: 80, formatter: accounttypeformatter }
                ]],
                onSelect: function (rowIndex, rowData) {
                  var row = $dg.datagrid('getRows')[editIndex];
                  //console.log(row);
                  row.CompanyName = rowData.Name;
                  row.CompanyCode = rowData.Code;
                  var ed1 = $dg.datagrid('getEditor', { index: editIndex, field: 'AccountType' });
                  $(ed1.target).combobox('setValue', rowData.Type);

                }
              }
            },
            formatter: function (value, row, index) {
              return row.CompanyName
            }
          },
           
          {
            field: 'PhoneNumber',
            title: '<span class="required">电话号码</span>',
            width: 140,
            editor: {
              type: 'textbox',
              options: {
                prompt: '@Html.DisplayNameFor(model => model.PhoneNumber)',
                required: false,
                validType: ['tel', 'length[0,50]']
              }
            },
            sortable: true,
            resizable: true
          },
          {
            field: 'AvatarsX50',
            title: '@Html.DisplayNameFor(model => model.AvatarsX50)',
            width: 140,
            editor: {
              type: 'combobox',
              options: {
                prompt: '@Html.DisplayNameFor(model => model.AvatarsX50)',
                required: false,
                method: 'get',
                valueField: 'name',
                textField: 'name',
                panelHeight: 'auto',
                url: '/AccountManage/GetAvatarsX50',
                formatter: function (row) {
                  var imageFile = '/content/img/avatars/' + row.name + ".png";
                  return '<img class="item-img" src="' + imageFile + '"/><span class="item-text">' + row.name + '</span>';
                }
              }
            },
            sortable: true,
            resizable: true
          } 
        ]]
      });
      $dg.datagrid('enableFilter', [
        {
          field: 'AccountType',
          type: 'accounttypefilter',
        },
        {
          field: 'TenantId',
          type: 'combogrid',
          options: {
            idField: 'Id',
            panelWidth: 290,
            textField: 'Name',
            method: 'get',
            url: '/Companies/GetComboData',
            icons: [{
              iconCls: 'icon-clear',
              handler: function (e) {
                $dg.datagrid('removeFilterRule', 'TenantId');
                $dg.datagrid('doFilter');
              }
            }],
            columns: [[
              { field: 'Name', title: '公司名称', width: 200 },
              { field: 'Type', title: '类型', width: 80, formatter: accounttypeformatter }
            ]],
            onChange: value => {
              if (value === '' || value === null) {
                $dg.datagrid('removeFilterRule', 'TenantId');
              } else {
                $dg.datagrid('addFilterRule', {
                  field: 'TenantId',
                  op: 'equal',
                  value: value
                });
              }
              $dg.datagrid('doFilter');
            }
          }
        }]);
    });
  </script>

  <script src="~/Scripts/plugin/jquery-validate/jquery.validate.min.js"></script>

}

