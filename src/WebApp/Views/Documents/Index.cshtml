@model WebApp.Models.Document
@{
  ViewBag.Title = "附件信息";
}
<!-- MAIN CONTENT -->
<div id="content">
  <!-- quick navigation bar -->
  <div class="row">
    <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
      <h1 class="page-title txt-color-blueDark">
        <i class="fa fa-table fa-fw "></i>
        业务操作
        <span>
          >
          附件信息
        </span>
      </h1>
    </div>
    <div class="col-xs-12 col-sm-5 col-md-5 col-lg-8">

    </div>
  </div>
  <!-- end quick navigation bar -->
  <!-- widget grid -->
  <section id="widget-grid" class="">
    <!-- row -->
    <div class="row">
      <!-- NEW WIDGET START -->
      <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
        <!-- Widget ID (each widget will need unique ID)-->
        <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false" data-widget-deletebutton="false">
          <!-- widget options:
          usage: <div class="jarviswidget" id="wid-id-0" data-widget-editbutton="false">
          data-widget-colorbutton="false"
          data-widget-editbutton="false"
          data-widget-togglebutton="false"
          data-widget-deletebutton="false"
          data-widget-fullscreenbutton="false"
          data-widget-custombutton="false"
          data-widget-collapsed="true"
          data-widget-sortable="false"
          -->
          <header>
            <span class="widget-icon"> <i class="fa fa-table"></i> </span>
            <h2>附件信息</h2>
          </header>

          <!-- widget div-->
          <div>
            <!-- widget edit box -->
            <div class="jarviswidget-editbox">
              <!-- This area used as dropdown edit box -->
            </div>
            <!-- end widget edit box -->
            <!-- widget content -->
            <div class="widget-body no-padding">
              <div class="sk-spinner sk-spinner-wave">
                <div class="sk-rect1"></div>
                <div class="sk-rect2"></div>
                <div class="sk-rect3"></div>
                <div class="sk-rect4"></div>
                <div class="sk-rect5"></div>
              </div>
              <div class="widget-body-toolbar">
                <div class="row">
                  <div class="col-sm-8  ">
                    <!-- 开启授权控制请参考 @@if (Html.IsAuthorize("Create") -->
                    <div class="btn-group btn-group-sm">
                      <button type="button" onclick="uploadfile()" class="btn btn-default"><i class="fa fa-cloud-upload"></i> 上传文件 </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button name="deletebutton" disabled onclick="removeit()" class="btn btn-default"> <i class="fa fa-trash-o"></i> @Html.L("Delete") </button>
                    </div>
                    <div class="btn-group btn-group-sm">
                      <button onclick="reload()" class="btn btn-default"> <i class="fa fa-refresh"></i> @Html.L("Refresh") </button>
                    </div>
                    <div class="btn-group btn-group-sm hidden-xs hidden-md">
                      <button onclick="exportexcel()" class="btn btn-default"> <i class="fa fa-file-excel-o"></i> @Html.L("Export") </button>
                    </div>
             
           
                  </div>
                  <div class="col-sm-4 text-align-right visible-lg-inline-block">
                    <div class="btn-group btn-group-sm">
                      <button onclick="window.history.back()" class="btn btn-sm btn-success"> <i class="fa fa-chevron-left"></i> @Html.L("GoBack") </button>
                    </div>
                  </div>
                </div>

              </div>
              <div class="alert alert-warning no-margin fade in">
                <button class="close" data-dismiss="alert">
                  ×
                </button>
                <i class="fa-fw fa fa-info"></i>
                注意事项:
              </div>
              <!--begin datagrid-content -->
              <div class="table-responsive">
                <table id="documents_datagrid"></table>
              </div>
              <!--end datagrid-content -->
            </div>
            <!-- end widget content -->
          </div>
          <!-- end widget div -->
        </div>
        <!-- end widget -->
      </article>
      <!-- WIDGET END -->
    </div>
    <!-- end row -->
  </section>
  <!-- end widget grid -->
  <!-- file upload partial view -->
  <!-- RenderPartial() does exactly the same thing and is better for performance over Partial() -->
  <!-- end detail popup window -->
  <div id="documentdetailwindow" hidden="hidden" class="easyui-window"
       title="上传附件"
       data-options="modal:true,
                    closed:true,
                    minimizable:false,
                    collapsible:false,
                    maximized:false,
                    iconCls:'icon-more',
                    footer:'#windowfooter',
                    closeDuration:200,
                    closeAnimation:'slide',
                    openDuration:300,
                    openAnimation:'slide',
                    onBeforeClose:function(){
                      var that = $(this);
                      if(hook){
                        $.messager.confirm('确认','你确定要放弃保存修改的记录?',function(r){
                        if (r){
                          var opts = that.panel('options');
                          var onBeforeClose = opts.onBeforeClose;
                          opts.onBeforeClose = function(){};
                          that.panel('close');
                          opts.onBeforeClose = onBeforeClose;
                          hook = false;
                        }
                        });
                        return false;
                      }
                    },
                    onOpen:function(){
                       $(this).window('vcenter');
                       $(this).window('hcenter');
                    },
                    onRestore:function(){
                    },
                    onMaximize:function(){
                    }
                    " style="width:600px;height:320px">
    <!-- begin toolbar -->
    <div class="window-body-toolbar">
      <div class="row">
        <div class="col-sm-8">
          <div class="btn-group btn-group-sm">
            <button name="saveitembutton" onclick="savedocumentitem()" class="btn btn-default">
              <i class="fa fa-floppy-o"></i> @Html.L("Save")
            </button>
          </div>


        </div>
        <div class="col-sm-4 text-align-right">
          <div class="btn-group btn-group-sm">
            <button type="button" class="btn   btn-success" onclick="closedocumentdetailwindow()">
              <i class="fa fa-chevron-left"></i>
              @Html.L("Close")
            </button>
          </div>
        </div>
      </div>
    </div>
    <!-- end toolbar -->
    <!-- begin window body -->
    <div class="widget-body">
      <form id="document_form"
            class="easyui-form form-horizontal padding-10"
            method="post"
            data-options="novalidate:true,
                            onChange: function(target){
                              hook = true;
                              $('button[name*=\'saveitembutton\']').prop('disabled', false);
                             },
                             onLoadSuccess:function(data){
                               hook = false;
                               $('button[name*=\'saveitembutton\']').prop('disabled', true);
                             }">
        @Html.AntiForgeryToken()
        <!--Primary Key-->
        @Html.HiddenFor(model => model.Id)
        <fieldset>
          <!-- begin row -->
          <!--业务单号-->
          <div class="form-group  col-md-6">
            <label class="col-md-3 control-label"><span class="required">@Html.DisplayNameFor(model => model.OrderKey)</span></label>
            <div class="col-md-9">
              <input id="@Html.IdFor(model => model.OrderKey)"
                     name="@Html.NameFor(model => model.OrderKey)"
                     value="@Html.ValueFor(model => model.OrderKey)"
                     tabindex="0" required
                     class="easyui-textbox"
                     style="width:100%"
                     type="text"
                     data-options="prompt:'@Html.DisplayNameFor(model => model.OrderKey)',
								 required:true,
                                 validType: 'length[0,50]'
                                 " />
            </div>
          </div>
          <div class="form-group  col-md-6">
            <label class="col-md-3 control-label"><span class="required">@Html.DisplayNameFor(model => model.FileName)</span></label>
            <div class="col-md-9">
              <input id="@Html.IdFor(model => model.FileName)"
                     name="@Html.NameFor(model => model.FileName)"
                     value="@Html.ValueFor(model => model.FileName)"
                     tabindex="0" required
                     class="easyui-filebox"
                     style="width:100%"
                     type="text"
                     data-options="prompt:'@Html.DisplayNameFor(model => model.FileName)',
								 required:true,
                                 " />
            </div>
          </div>
          <!--描述-->
          <div class="form-group  col-md-6">
            <label class="col-md-3 control-label">@Html.DisplayNameFor(model => model.Description)</label>
            <div class="col-md-9">
              <input id="@Html.IdFor(model => model.Description)"
                     name="@Html.NameFor(model => model.Description)"
                     value="@Html.ValueFor(model => model.Description)"
                     tabindex="9"
                     class="easyui-textbox"
                     style="width:100%"
                     type="text"
                     data-options="prompt:'@Html.DisplayNameFor(model => model.Description)',
								 required:false,
                                 validType: 'length[0,300]'
                                 " />
            </div>
          </div>
          <!--上传用户-->
          <div class="form-group  col-md-6">
            <label class="col-md-3 control-label">@Html.DisplayNameFor(model => model.User)</label>
            <div class="col-md-9">
              <input id="@Html.IdFor(model => model.User)"
                     name="@Html.NameFor(model => model.User)"
                     value="@Html.ValueFor(model => model.User)"
                     tabindex="10"
                     class="easyui-textbox"
                     style="width:100%"
                     type="text"
                     data-options="prompt:'@Html.DisplayNameFor(model => model.User)',
								 required:false,readonly:true,                                 validType: 'length[0,20]'
                                 " />
            </div>
          </div>

          <!--end row-->
        </fieldset>
      </form>

    </div>
    <!--end window body -->
  </div>
  <div id="windowfooter" style="padding:5px;">&nbsp;</div>
</div>
<!-- END MAIN CONTENT -->
<link href="~/Scripts/plugin/fancybox/jquery.fancybox.min.css" rel="stylesheet" />
@section Scripts {
  <script src="~/Scripts/plugin/fancybox/jquery.fancybox.min.js"></script>
  <script src="~/Scripts/plugin/jquery.serializefiles/jquery.serializefiles.min.js"></script>
  <script type="text/javascript">
      //是否强制从后台取值
      const REQUIRBACKEND = false;
      //是否开启行内编辑
      const EDITINLINE = true;
      //上传导入参数设定
      const entityname = "doc";
  var doc = {};
  //上传文件
    function uploadfile() {
      doc = {
        User: $.getUserName(),
        UploadDateTime: moment().format('YYYY-MM-DD HH:mm:ss'),
      };
      $('#documentdetailwindow').window('open');
      $('#document_form').form('reset');
      $('#document_form').form('load', doc);
    }
    //上传文件
    function savedocumentitem() {
      const $documentform = $('#document_form');
      if ($documentform.form('enableValidation').form('validate')) {
        var formdata = $documentform.serializeFiles();
        const url = '/Documents/UploadFile'
        $.messager.progress({ title: '请等待', msg: '正在上传数据...', interval: 200 });
        $.ajax({
          url: url,
          data: formdata,
          type: 'POST',
          contentType: false,
          processData: false,

        }).then(res => {
          $.messager.progress('close');
          hook = false;
          console.log(res);
          $('#documentdetailwindow').window('close');
            reload();
          }).fail((res) => {
            $.messager.alert('异常', '上传附件错误');
            $.messager.progress('close');
          });

      }

    }
  //下载文件
    function downloadfile(id, index) {
      var doc = $dg.datagrid('getRows')[index];
      if (doc.ContentType.indexOf('image') >= 0) {
        const url = `${doc.Url}`;

        $.fancybox.open([
          {
            src: url,
            opts: {
              caption: doc.FileName,
            }
          }]);
      } else {
        const url = `/FileUpload/Download?file=${doc.Url}`;
        $.fileDownload(url)
          .done(() => {
            console.log('file download a success!');
            toastr.success('模板下载完成!');
          })
          .fail(() => {
            $.messager.alert('失败', '没有下载到导入模板[doc.xlsx]文件!', 'error');
          });
      }
    }
    function closedocumentdetailwindow() {

      $('#documentdetailwindow').window('close');

    }
      //下载Excel导入模板
      function downloadtemplate() {
          //默认模板路径存放位置
          const url = '/FileUpload/Download?file=/ExcelTemplate/doc.xlsx';
          $.fileDownload(url)
           .done(() => {
                    //console.log('file download a success!');
                    toastr.success('模板下载完成!');
                })
           .fail(() => {
               $.messager.alert('失败','没有下载到导入模板[doc.xlsx]文件!','error');
            });
       }
       //打印
       function print() {
            $dg.datagrid('print', 'DataGrid');
       }
        //打开Excel上传窗口
	   function importexcel() {
		    $('#importwindow').window('open');
	   }
	   //执行导出下载Excel
	   function exportexcel() {
				const filterRules = JSON.stringify($dg.datagrid('options').filterRules);
				//console.log(filterRules);
				$.messager.progress({ title: '正在执行导出!' });
				let formData = new FormData();
				formData.append('filterRules', filterRules);
				formData.append('sort', 'Id');
				formData.append('order', 'asc');
				$.postDownload('/documents/ExportExcel', formData).then(res => {
                    $.messager.progress('close');
                    toastr.success('导出成功!');
                }).catch(err => {
                    //console.log(err);
                    $.messager.progress('close');
                    $.messager.alert('失败', err.statusText, 'error');
                });

		}
        //显示帮助信息
        function dohelp() {
            toastr.info('有问题请联系管理员 <br><i class="fa fa-envelope-o" aria-hidden="true"></i> : demo@admin.com','帮助');
        }
       var editIndex = undefined;
       //重新加载数据
	   function reload() {
			if (EDITINLINE && endEditing()) {
                $dg.datagrid('uncheckAll');
			    $dg.datagrid('reload');
                 $("button[name*='deletebutton']").prop("disabled", true);
                 $("button[name*='savebutton']").prop("disabled", true);
                 $("button[name*='cancelbutton']").prop("disabled", true);
		    } else if (!EDITINLINE) {
                $dg.datagrid('uncheckAll');
			    $dg.datagrid('reload');
                 $("button[name*='deletebutton']").prop("disabled", true);
                 $("button[name*='savebutton']").prop("disabled", true);
                 $("button[name*='cancelbutton']").prop("disabled", true);
            }
	   }
      //关闭编辑状态
	  function endEditing() {
			if (editIndex === undefined) {
                return true;
            }
			if ($dg.datagrid('validateRow', editIndex)) {
				$dg.datagrid('endEdit', editIndex);
                return true;
			} else {
				const invalidinput = $('input.validatebox-invalid',$dg.datagrid('getPanel'));
                const fieldnames = invalidinput.map((index, item) => {
                  return $(item).attr('placeholder') || $(item).attr('id');
                });
                $.messager.alert('提示', `${Array.from(fieldnames)} 输入有误.`, 'error');
				return false;
			}
		}
    //单击列开启编辑功能
	function onClickCell(index, field) {
        doc = $dg.datagrid('getRows')[index];
	    const _actions = ['action', 'ck'];
		if (!EDITINLINE || $.inArray(field, _actions) >= 0) {
				return;
		}
		if (editIndex !== index) {
		    if (endEditing()) {
			    $dg.datagrid('selectRow', index)
				   .datagrid('beginEdit', index);
                hook = true;
                editIndex = index;
				const ed = $dg.datagrid('getEditor', { index: index, field: field });
				if (ed) {
						($(ed.target).data('textbox') ? $(ed.target).textbox('textbox') : $(ed.target)).focus();
				}
			} else {
				$dg.datagrid('selectRow', editIndex);
			}
		}
	}
    //新增记录
	async function append() {
       doc = { User: $.getUserName(),
UploadDateTime: moment().format('YYYY-MM-DD HH:mm:ss'),
 };
        //需要后台创建对象
       if (REQUIRBACKEND) {
         doc = await $.get('/documents/NewItemAsync');
       }
        if (!EDITINLINE) {
           //弹出新增窗口
           opendocumentdetailwindow(doc, 'Added');
        } else {
			if (endEditing()) {
				//对必填字段进行默认值初始化
				$dg.datagrid('insertRow',
                              {
                                  index: 0,
                                  row: doc
                               });
				editIndex = 0;
				$dg.datagrid('selectRow', editIndex)
					.datagrid('beginEdit', editIndex);
                hook = true;
			}
        }
	}
    //删除编辑的行
	function removeit() {
      
		  deletechecked();
   
	}
  //删除该行
  function deleteRow(id) {
    $.messager.confirm('确认', '你确定要删除该记录?', result => {
      if (result) {
        $.post('/documents/DeleteCheckedAsync', { id: [id] })
          .done(response => {
             if (response.success) {
                toastr.error('成功删除');
                reload();
              } else {
                $.messager.alert('错误', response.err,'error');
              }
          })
          .fail((jqXHR, textStatus, errorThrown) => {
			 $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
		  });
      }
     });
  }
    //删除选中的行
    function deletechecked() {
        const id = $dg.datagrid('getChecked').filter(item=>item.Id!=null && item.Id > 0).map(item => {
                   return item.Id;
                });;
        if (id.length > 0) {
           $.messager.confirm('确认', `你确定要删除这 <span class='badge bg-color-red'>${id.length} </span> 行记录?`, result => {
                if (result) {
                    $.post('/documents/DeleteCheckedAsync', { id: id })
                         .done(response => {
                                if (response.success) {
                                    toastr.error(`成功删除【${id.length}】行记录`);
                                    reload();
                                } else {
                                    $.messager.alert('错误', response.err,'error');
                                }
                          })
                          .fail((jqXHR, textStatus, errorThrown) => {
						     $.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					      });
                    }
                });
         } else {
                $.messager.alert('提示', '请先选择要删除的记录!','question');
         }
     }
    //提交保存后台数据库
	function accept() {
	  if (endEditing()) {
		if ($dg.datagrid('getChanges').length > 0) {
		  const inserted = $dg.datagrid('getChanges', 'inserted').map(item => {
          item.TrackingState = 1;
          return item;
        });
        const updated = $dg.datagrid('getChanges', 'updated').map(item => {
          item.TrackingState = 2
          return item;
        });
        const deleted = $dg.datagrid('getChanges', 'deleted').map(item => {
          item.TrackingState = 3
          return item;
        });
        //过滤已删除的重复项
        const changed = inserted.concat(updated.filter(item => {
            return !deleted.includes(item);
          })).concat(deleted);
        //console.table(changed);
        $.messager.progress({ title: '请等待', msg: '正在保存数据...', interval:200});
		$.post('/documents/SaveDataAsync', {documents:changed})
                     .done(response => {
                     $.messager.progress('close');
						   //console.log(response);
						   if (response.success) {
							   toastr.success('保存成功');
							   $dg.datagrid('acceptChanges');
							   reload();
                               hook = false;
						   } else {
                               $.messager.alert('错误', response.err ,'error');
                           }
					    })
                      .fail((jqXHR, textStatus, errorThrown) => {
                        $.messager.progress('close');
						$.messager.alert('异常', `${jqXHR.status}: ${jqXHR.statusText} `, 'error');
					  });
				}
			}
	}
	function reject() {
	    $dg.datagrid('rejectChanges');
	    editIndex = undefined;
        hook = false;
	}
	function getChanges() {
	    const rows = $dg.datagrid('getChanges');
		//console.log(rows.length + ' rows are changed!');
	}
    //弹出明细信息
	async function showdetailswindow(id,index) {
        var doc = $dg.datagrid('getRows')[index];
        if (REQUIRBACKEND) {
           doc = await $.get('/documents/GetItemAsync/' + id);
        }
        opendocumentdetailwindow(doc,'Modified');
	}

    //初始化定义datagrid
    var $dg = $('#documents_datagrid');
    $(() => {
		 //定义datagrid结构
         $dg.datagrid({
                        rownumbers:true,
				        checkOnSelect:false,
				        selectOnCheck:true,
				        idField:'Id',
				        sortName:'Id',
				        sortOrder:'desc',
				        remoteFilter: true,
				        singleSelect: false,
                        url: '/documents/GetDataAsync',
				        method: 'get',
				        pagination: true,
                        striped:true,
                        onBeforeLoad: function () {
                           //datagrid resize when jarvisWidgets resized.
                           const that = $(this);
                           $(window).on("resize.jarvisWidgets", () => {
                               that.datagrid('resize');
                           })
                         },
                         onLoadSuccess: function (data) {
                            editIndex = undefined;
                        },
                        onCheck: function () {
                           $("button[name*='deletebutton']").prop("disabled", false);
                        },
                        onUncheck: function () {

                        },
				        onSelect: function(index,row) {
                           doc = row;
                        },
                        onBeginEdit: function (index, row) {

                         },
                        onEndEdit: function (index, row) {

                         editIndex = undefined;
                         },
                         onBeforeEdit: function (index, row) {
                            row.editing = true;
                            $("button[name*='deletebutton']").prop("disabled", false);
                            $("button[name*='cancelbutton']").prop("disabled", false);
                            $("button[name*='savebutton']").prop("disabled", false);
                            $(this).datagrid('refreshRow', index);
                          },
                          onAfterEdit: function (index, row) {
                            row.editing = false;
                            $(this).datagrid('refreshRow', index);
                           },
                           onCancelEdit: function (index, row) {
                             row.editing = false;
                             $("button[name*='deletebutton']").prop("disabled", false);
                             $("button[name*='savebutton']").prop("disabled", true);
                             $("button[name*='cancelbutton']").prop("disabled", true);
                             $(this).datagrid('refreshRow', index);
                         },
                        frozenColumns: [[
                         /*开启CheckBox选择功能*/
                         { field: 'ck', checkbox: true },
                         {
                            field: 'action',
                            title:'@Html.L("Command")',
                            width: 85,
                            sortable: false,
                            resizable: true,
                            formatter: function showdetailsformatter(value, row, index) {
                                         if (!row.editing) {
                                            return `<div class="btn-group">\
                                                         <button onclick="downloadfile('${row.Id}',  ${index})" class="btn btn-default btn-xs" title="下载附件" ><i class="fa fa-download"></i> </button>\
                                                         <button onclick="deleteRow('${row.Id}',${index})" class="btn btn-default btn-xs" title="删除记录" ><i class="fa fa-trash-o"></i> </button>\
                                                    </div>`;
                                         } else {
                                             return `<button class="btn btn-default btn-xs" disabled title="查看明细"  ><i class="fa fa-pencil-square-o"></i> </button>`;
                                         }
                                     }
                          }
                        ]],
                        columns: [[
		     { /*Id*/
               field:'Id',
               title:'<span class="required">@Html.DisplayNameFor(model => model.Id)</span>',
               width:120 ,
               sortable:true,
               resizable:true,
               hidden:true
              },
			{    /*业务单号*/
                 field:'OrderKey',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.OrderKey)</span>',
                 width:120,
                 hidden:false,

                 sortable:true,
                 resizable:true
			},
			{    /*文件名*/
                 field:'FileName',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.FileName)</span>',
                 width:160,
                 hidden:false,

                 sortable:true,
                 resizable:true
			},
			{    /*文件类型*/
                 field:'FileType',
                 title:'@Html.DisplayNameFor(model => model.FileType)',
                 width:100,
                 hidden:false,

                 sortable:true,
                 resizable:true
                          },
      {    /*文件类型*/
        field:'ContentType',
                 title:'@Html.DisplayNameFor(model => model.ContentType)',
                 width:160,
                 hidden:false,

                 sortable:true,
                 resizable:true
                          },
      {    /*描述*/
                 field:'Description',
                 title:'@Html.DisplayNameFor(model => model.Description)',
                 width:300,
                 hidden:false,

                 sortable:true,
                 resizable:true
			},

			{    /*URL*/
                 field:'Url',
                 title:'@Html.DisplayNameFor(model => model.Url)',
                 width:200,
                 hidden:false,

                 sortable:true,
                 resizable:true
			},
			{    /*文件MD5*/
                 field:'MD5',
                 title:'@Html.DisplayNameFor(model => model.MD5)',
                 width:300,
                 hidden:true,
                 sortable:true,
                 resizable:true
			},
			{    /*文件大小*/
                 field:'Size',
                 title:'<span class="required">@Html.DisplayNameFor(model => model.Size)</span>',
                 width:100,
                 align:'right',
                 hidden:false,

                formatter:numberformatter,
                sortable:true,
                resizable:true
			},

			{    /*上传用户*/
                 field:'User',
                 title:'@Html.DisplayNameFor(model => model.User)',
                 width:130,
                 hidden:false,

                 sortable:true,
                 resizable:true
			},
			{   /*上传时间*/
                field:'UploadDateTime',
                title:'<span class="required">@Html.DisplayNameFor(model => model.UploadDateTime)</span>',
                width:160,
                align:'right',
                hidden:false,

                formatter:datetimeformatter,
                sortable:true,
                resizable:true
			},
                 ]]
           });

           $dg.datagrid('enableFilter',[
				{   /*Id*/
					  field: 'Id',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{   /*文件大小*/
					  field: 'Size',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{   /*图片宽度*/
					  field: 'Width',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{   /*图片高度*/
					  field: 'Height',
					  type: 'numberbox',
					  op:['equal','notequal','less','lessorequal','greater','greaterorequal']
				  },
				{     /*上传时间*/
					  field: 'UploadDateTime',
					  type: 'dateRange',
					  options: {
						  onChange: value => {
							    $dg.datagrid('addFilterRule', {
									  field: 'UploadDateTime',
									  op: 'between',
									  value: value
								  });

							    $dg.datagrid('doFilter');
						  }
					  }
				  },
		   ]);
	 });

  </script>

}


